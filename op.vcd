$date
	Tue May 16 03:46:49 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_Processor $end
$var reg 1 ! clk1 $end
$var reg 1 " clk2 $end
$var integer 32 # fd [31:0] $end
$scope module dut $end
$var wire 1 ! clk1 $end
$var wire 1 " clk2 $end
$var wire 1 $ rst $end
$var wire 2 % cond [1:0] $end
$var wire 16 & EX_MEM_ALUOut [15:0] $end
$var reg 16 ' Acc [15:0] $end
$var reg 16 ( EX_MEM_IR [15:0] $end
$var reg 1 ) HLT $end
$var reg 16 * ID_EX_A [15:0] $end
$var reg 16 + ID_EX_IR [15:0] $end
$var reg 16 , IF_ID_IR [15:0] $end
$var reg 16 - PC [15:0] $end
$var reg 1 . TAKEN_BRANCH $end
$var reg 6 / cb_EX [5:0] $end
$var reg 6 0 cb_ID [5:0] $end
$var integer 32 1 data_ptr [31:0] $end
$scope module func $end
$var wire 1 2 f $end
$var wire 1 3 no $end
$var wire 1 4 nx $end
$var wire 1 5 ny $end
$var wire 16 6 x [15:0] $end
$var wire 16 7 x1 [15:0] $end
$var wire 16 8 y [15:0] $end
$var wire 16 9 y1 [15:0] $end
$var wire 1 : zx $end
$var wire 1 ; zy $end
$var wire 17 < f2 [16:0] $end
$var wire 17 = f1 [16:0] $end
$var reg 1 > ng $end
$var reg 16 ? o [15:0] $end
$var reg 1 @ zr $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x@
bx ?
x>
bx =
bx <
x;
x:
bx 9
bx 8
bx 7
bx 6
x5
x4
x3
x2
b11111111111111111111111111111111 1
bx 0
bx /
x.
b0 -
bx ,
bx +
bx *
0)
b0 (
bx '
bx &
bx %
z$
b10000000000000000000000000000011 #
0"
0!
$end
#1
b1 -
b101000000000110 ,
b0 1
1!
#2
1.
b101000000000110 +
1"
#3
0!
#4
0"
#5
0.
b110 -
b1011010000000001 ,
b1 1
1!
#6
b10 0
b1011010000000001 +
1"
#7
0!
#8
0"
#9
0:
04
0;
05
12
03
b111 -
b10100000000000 ,
b10 1
b1011010000000001 (
b10 /
1!
#10
b11 9
b110111 0
b11 *
b11 8
b10100000000000 +
1"
#11
0!
#12
0"
#13
b100 &
b100 ?
0@
b0 %
0>
b100 <
b11111111111111011 =
b1111111111111111 7
b1111111111111100 9
1:
14
15
13
b10100000000000 (
b110111 /
b1000 -
bx ,
b11 1
1!
#14
b1 &
b1 ?
b1 <
b11111111111111110 =
b1111111111111111 9
b100 '
b100 6
b110000 0
b0 *
b0 8
bx +
1"
#15
0!
#16
0"
#17
1@
b0 &
b0 ?
b1 %
0>
b0 9
b0 =
b0 <
05
02
03
b1001 -
b100 1
bx (
b110000 /
1!
#18
bx &
bx ?
b0x %
x@
b0xxxxxxxxxxxxxxxx <
b0xxxxxxxxxxxxxxxx =
bx 9
bx *
bx 8
b0 '
b0 6
1"
#19
0!
#20
0"
